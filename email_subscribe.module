<?php
/**
 * Implementation of hook_permission
 * */
function email_subscribe_permission(){
  return array(
    'access email_subscribe' => array(
      'title' => t('Allow subscribe/unsubscribe'),
    ),
    'administer email_subscribe' => array(
      'title' => t('Administer Email Subscribe module'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_menu
 * */
function email_subscribe_menu() {
  /*
   * Administration interface
   * */
  $menu['admin/config/services/email_subscribe'] = array(
    'title' => 'Email Subscribe',
    'description' => 'View the subscribed users and settings for the module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_list_users_form'),
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
  );
  
  $menu['admin/config/services/email_subscribe/list-users'] = array(
    'title' => 'List of subscribed users', 
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'weight' => -1,
  );
  
  $menu['admin/config/services/email_subscribe/mass-subscribe'] = array(
    'title' => 'Mass Subscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_mass_subscribe_form'),
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
    'type' => MENU_LOCAL_ACTION, 
  );
  
  $menu['admin/people/email_subscribe'] = array(
    'title' => 'Mass Subscribe by email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_mass_subscribe_form'),
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  
  $menu['admin/config/services/email_subscribe/service'] = array(
    'title' => 'Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_settings_form'),
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['admin/config/services/email_subscribe/service/settings'] = array(
    'title' => 'Email Subscribe settings', 
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'weight' => -1,
  );
  
  $menu['admin/config/services/email_subscribe/service/clean'] = array(
    'title' => 'Cleaning the database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_clean_database_form'),
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['admin/config/services/email_subscribe/service/statistics'] = array(
    'title' => 'Statistics',
    'page callback' => 'email_subscribe_statistics_page',
    'access arguments' => array('administer email_subscribe'),
    'file' => 'email_subscribe.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );
  
  $menu['admin/config/services/email_subscribe/confirm/%'] = array(
    'title' => 'Confirm email address',
    'page callback' => '_email_subscribe_confirmemail_by_admin',
    'page arguments' => array(5),
    'access arguments' => array('administer email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.admin.inc',
  );

  $menu['admin/config/services/email_subscribe/unsubscribe/%'] = array(
    'title' => 'Unsubscribe email address',
    'page callback' => '_email_subscribe_unsubscribe_by_admin',
    'page arguments' => array(5),
    'access arguments' => array('administer email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.admin.inc',
  );
  
  $menu['admin/config/services/email_subscribe/re-subscribe/%'] = array(
    'title' => 'Re-subscribe email address',
    'page callback' => '_email_subscribe_resubscribe_by_admin',
    'page arguments' => array(5),
    'access arguments' => array('administer email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.admin.inc',
  );
  
  $menu['admin/config/services/email_subscribe/remove/%'] = array(
    'title' => 'Remove email address',
    'page callback' => '_email_subscribe_remove_by_admin',
    'page arguments' => array(5),
    'access arguments' => array('administer email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.admin.inc',
  );
  
  //~ User menu
  
  $menu['email-subscribe'] = array(
    'title' => 'Subscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_subscribe_form'),
    'access arguments' => array('access email_subscribe'),
    'file' => 'email_subscribe.user.inc',
  );
  
  $menu['email-subscribe-confirm-email'] = array(
    'title' => 'Confirm email address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_confirmemail_form'),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
  
  //~ User/Token
  $menu['email-subscribe-confirm-email/token/%'] = array(
    'title' => 'Confirm email address',
    'page callback' => 'email_subscribe_confirmemail_token',
    'page arguments' => array(2),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
  
  $menu['email-unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_unsubscribe_form'),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
  
  //~ User/Token
  $menu['email-unsubscribe/token/%'] = array(
    'title' => 'Confirm unsubscribe email address',
    'page callback' => 'email_subscribe_unsubscribe_token',
    'page arguments' => array(2),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
  
  $menu['email-resubscribe'] = array(
    'title' => 'Re-subscribe email address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_subscribe_resubscribe_form'),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
  
  //~ Token
  $menu['email-resubscribe/token/%'] = array(
    'title' => 'Confirm re-subscribe email address',
    'page callback' => 'email_subscribe_resubscribe_token',
    'page arguments' => array(2),
    'access arguments' => array('access email_subscribe'),
    'type'=>MENU_CALLBACK,
    'file' => 'email_subscribe.user.inc',
  );
   
  return $menu;
}

/**
 * Implements hook_entity_info_alter().
 */
function email_subscribe_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['email_subscribe'] = array(
    'label' => t('Subscribe by email'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_block_info().
 */
function email_subscribe_block_info(){
  $blocks['email_subs_subscribe_block'] = array(
    'info' => t('Subscribe by email'),
    'status' => FALSE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'email-subscribe',
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function email_subscribe_block_configure($delta=''){
  $form = array();
  if($delta == 'email_subs_subscribe_block'){
    $default_values = variable_get('email_subscribe_allowed_node_types', array('page'));
    $form['email_subscribe_allowed_node_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Node types are available for subscription'),
      '#options' => node_type_get_names(),
      '#default_value' => $default_values,
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function email_subscribe_block_save($delta = '', $edit = array()) {
  if ($delta == 'email_subs_subscribe_block') {
    $value = $edit['email_subscribe_allowed_node_types'];
    if (is_array($value)) {
      $value = array_keys(array_filter($value));
    }
    variable_set('email_subscribe_allowed_node_types', $value);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function email_subscribe_block_view($delta = '') {
  module_load_include('inc', 'email_subscribe', 'email_subscribe.user');
  if($delta == 'email_subs_subscribe_block'){
    $block['subject'] = t('Subscribe to new posts');
    $block['content'] = drupal_get_form('email_subscribe_subscribe_form');
  }
  return $block;
}

/**
 * Implements hook_cron().
 */
function email_subscribe_cron() {
  $interval = variable_get('email_subscribe_interval', 60*60);
  $limit  = (int)variable_get('email_subscribe_limit', 15);
  $isGorup = (bool)variable_get('email_subscribe_group_nodes', 0);

  if (REQUEST_TIME >= variable_get('email_subscribe_next_execution', 0)) {
    $arrRes = array();
    
    $rnodes = db_select('email_subscribe_readed_nodes', 'rn');
    $rnodes->innerJoin('email_subscribe_users', 'u', 'rn.rn_sid=u.sid');
    $rnodes->innerJoin('node', 'n', 'n.nid=rn.rn_nid');
    $rnodes->fields('u', array('email'))
    ->fields('rn', array('rn_id', 'rn_nid', 'rn_sid'))
    ->condition('u.status', 2)
    ->condition('rn.rn_status', 0)
    ->condition('n.status', NODE_PUBLISHED)
    ->condition('type', _email_subcribe_get_list_node_types(), 'IN')
    ->orderBy('n.nid, rn.rn_sid', 'ASC');
    if(!$isGorup){
      $rnodes->range(0, $limit);
    }
    $res = $rnodes->execute();
    
    //~ Alternative method for GROUP_CONCAT of MySql. Need for support for all database engines.
    foreach($res as $val){
      $arrRes[$val->rn_sid]['email'] = $val->email;
      $arrRes[$val->rn_sid]['rn_id'][] = $val->rn_id;
      $arrRes[$val->rn_sid]['rn_nid'][] = $val->rn_nid;
    }
    //~ Limiting of array when grouping nodes
    if($isGorup){
      $arrRes = array_slice($arrRes, 0, $limit, TRUE);
    }
    
    if(sizeof($arrRes) > 0 && !empty(current($arrRes))){
      $queue = DrupalQueue::get('email_subscribe');
      foreach($arrRes as $item) {
        $queue->createItem($item);
      }
      variable_set('email_subscribe_next_execution', REQUEST_TIME + $interval);
    }
  }
}

function _email_subcribe_preview_letter($values){
  $isGorup = (bool)$values['email_subscribe_group_nodes'];
  $out = '<div class="es-preview">';
  $viewTypesArr = _email_subcribe_get_list_node_view_types();
  $viewType = (int)variable_get('email_subscribe_node_views_type', 1);
  $viewType = $viewTypesArr[$viewType];
  
  $nids = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('n.status', NODE_PUBLISHED)
  ->orderBy('n.nid', 'DESC')
  ->range(0,2)
  ->execute()
  ->fetchAllAssoc('nid');

  $nodes = node_load_multiple(array_keys($nids));

  if($isGorup){
    $header = $values['email_subscribe_new_content_header'];
    if(is_array($header)){
      $header=$header['value'];
    }
    $out .= $header;
  }
  
  $body = $values['email_subscribe_new_content_body'];
  if(is_array($body)){
    $body=$body['value'];
  }
  
  foreach($nodes as $node){
    $nodeBody = '';
    
    $build = node_view($node, $viewType);
    unset($build['#theme']);
    unset($build['links']['comment']);
    unset($build['links']['statistics']);
    $build['links']['#weight'] = 1000;
    $teaser = drupal_render($build);
    
    $node_url = url('node/'.$node->nid, array('absolute'=>TRUE));
    $title = $node->title;
    
    $nodeBody =  preg_replace('/\[node_url\]/i', $node_url, $body);
    $nodeBody =  preg_replace('/\[title\]/i', $title, $nodeBody);
    $nodeBody =  preg_replace('/\[teaser\]/i', $teaser, $nodeBody);
    
    $out .= $nodeBody;
  }

  if($isGorup){
    $footer = $values['email_subscribe_new_content_footer'];
    if(is_array($footer)){
      $footer=$footer['value'];
    }
    $out .= $footer;
  }

  $out .= '</div>';
  
  drupal_set_title(t('Preview'));
  
  return $out;
}

/**
 * Implements hook_cron_queue_info().
 */
function email_subscribe_cron_queue_info() {
  $timeExc  = round((int)variable_get('email_subscribe_limit', 15)/2);
  $queues['email_subscribe'] = array(
    'worker callback' => '_email_subscribe_send_by_cron', 
    'time' => $timeExc,
  );
  return $queues;
}

/**
 * Send email and set node is readed.
 * */
function _email_subscribe_send_by_cron($item){
  $item = (object)$item;
  $msg = array();
  $isClean = (bool)variable_get('email_subscribe_dont_store_info_sent_emails', 0);
  $viewTypesArr = _email_subcribe_get_list_node_view_types();
  $viewType = (int)variable_get('email_subscribe_node_views_type', 1);
  $viewType = $viewTypesArr[$viewType];
  
  try{
    $nodes = node_load_multiple($item->rn_nid);
    
    foreach($nodes as $node){
      $build = node_view($node, $viewType);
      unset($build['#theme']);
      unset($build['links']['comment']);
      unset($build['links']['statistics']);
      $build['links']['#weight'] = 1000;
      $teaser = drupal_render($build);
      
      $msg['teaser'][] = $teaser;
      $msg['node_url'][] = url('node/'.$node->nid, array('absolute'=>TRUE, 'query' => array('utm_source' => 'newsletter', 'utm_medium' => 'email')));
      $msg['title'][] = $node->title;
    }
    
    if(email_subcribe_send_email_letter($item->email, 0, $msg)){
      if(!$isClean){
        db_update('email_subscribe_readed_nodes')->fields(array('rn_status'=>1, 'datechange'=>REQUEST_TIME))
        ->condition('rn_id', $item->rn_id, 'IN')->execute();
      }
      else{
        db_delete('email_subscribe_readed_nodes')
        ->condition('rn_id', $item->rn_id, 'IN')->execute();
      }
    }
  }
  catch(Exception $e){
    watchdog_exception('email-subscribe-error', $e);
    drupal_set_message(t('Error'), 'error');
  }
}

/**
 * Implements hook_node_insert().
 */
function email_subscribe_node_insert($node) {
  try{
    if(in_array((string)$node->type, array_values(_email_subcribe_get_list_node_types()), true)){
      $values = array();
      $users = db_select('email_subscribe_users', 'u')
      ->fields('u', array('sid'))
      ->condition('status', array(2), 'IN')
      ->execute();
      foreach($users as $val){
        $values[] = array(
          'rn_nid' => $node->nid,
          'rn_sid' => (int)$val->sid,
          'datechange' => REQUEST_TIME,
        );
      }
      unset($val);
      $query = db_insert('email_subscribe_readed_nodes')->fields(array('rn_nid', 'rn_sid', 'datechange'));
      foreach ($values as $record) {
        $query->values($record);
      }
      $res = $query->execute();
      if($res){
        drupal_set_message(t('Material added to the distribution list.'));
        watchdog('email-subscribe-info', 'Node with ID %node added to the distribution list', array('%node' => $node->nid));
      }
    }
  }
  catch(Exception $e){
    watchdog_exception('email-subscribe-error', $e);
    drupal_set_message(t('Error'), 'error');
  }
}

/**
 * Implement hook_mail().
 */
function email_subscribe_mail($key, &$message, $params) {
  global $user;
  
  $lang = language_default();
  
  if(isset($user->language)){
    $lang = $user->language;
  }
  else{
    $lang = $lang->language;
  }
  
  $options = array(
    'langcode' => $lang,
  );
  
  $site_name = variable_get('site_name', 'Drupal');
  
  switch ($key) {
    case 'new_content_message':
      $message['subject'] = t('New article on @site-name', array('@site-name' => $site_name), $options);
      //~ Note that the message body is an array, not a string.
    break;
    case 'confirm_message':
      $message['subject'] = t('Confirm email from @site-name to subscribe', array('@site-name' => $site_name), $options);
    break;
    case 'unsubscribe_message':
      $message['subject'] = t('Confirm to unsubscribe on the @site-name', array('@site-name' => $site_name), $options);
    break;
    case 'resubscribe_message':
      $message['subject'] = t('Confirm to re-subscribe on the @site-name', array('@site-name' => $site_name), $options);
    break;
    case 'admin_notice':
      $message['subject'] = t('New log entry in the module subscription on the site @site-name', array('@site-name' => $site_name), $options);
    break;
  }
  $message['body'][] = check_plain($params['message']);
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );
  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
}

/**
 * Send email
 * */
function email_subcribe_send_email_letter($to, $type=1, $msg=array()){
  $arrKeys = array('new_content_message', 'confirm_message', 'unsubscribe_message', 'resubscribe_message');
  $arrBody = array('email_subscribe_new_content_body', 'email_subscribe_confirm_body', 'email_unsubscribe_confirm_body', 'email_resubscribe_confirm_body');
  $arrUrl = array('email-unsubscribe', 'email-subscribe-confirm-email', 'email-unsubscribe', 'email-resubscribe');
  $arrAdm = array('Cron', 'Subscribe, not confirm', 'Unsubscribe', 'Re-subscribe');
  
  $from = variable_get('email_subscribe_from_email', 'admin@localhost.ru');
  $isGorup = (bool)variable_get('email_subscribe_group_nodes', 0);
  $params = array();
  $nodeBody = $fewBody ='';
  $isAdmin = user_access('administer email_subscribe');
  if(!empty($from)){
    $body = variable_get($arrBody[$type], '');
    if(is_array($body)){
      $body=$body['value'];
    }
    if(!empty($to) and !empty($body)){
      switch($type){
        case 0: case 2:
          $token = email_subscribe_generate_token($to,1);
        break;
        case 1: case 3: default:
          $token = email_subscribe_generate_token($to);
        break;
      }
      $url = url($arrUrl[$type].'/token/'.$token, array('absolute'=>TRUE));
      $body = preg_replace('/\[url\]/i', $url, $body);
      //~ New content email
      if(empty($type)){
        if($isGorup){
          $header = variable_get('email_subscribe_new_content_header');
          if(is_array($header)){
            $header=$header['value'];
          }
          $header = preg_replace('/\[url\]/i', $url, $header);
          $fewBody .= $header;
        }
        foreach($msg['node_url'] as $key=>$val){
          $nodeBody = preg_replace('/\[node_url\]/i', $val, $body);
          $nodeBody = preg_replace('/\[title\]/i', $msg['title'][$key], $nodeBody);
          $nodeBody = preg_replace('/\[teaser\]/i', $msg['teaser'][$key], $nodeBody);
          $fewBody .= $nodeBody;
        }
        if($isGorup){
          $footer = variable_get('email_subscribe_new_content_footer');
          if(is_array($footer)){
            $footer=$footer['value'];
          }
          $footer = preg_replace('/\[url\]/i', $url, $footer);
          $fewBody .= $footer;
        }
        $params['message'] = $fewBody;
      }
      else{
        $params['message'] = $body;
      }
      $language = language_default();
      $send = TRUE;

      $result = drupal_mail('email_subscribe', $arrKeys[$type], $to, $language, $params, $from, $send);
      if ($result['result'] == TRUE) {
        if(!empty($type)){
          drupal_set_message(t('In your e-mail address sent an email with further instructions.'), 'status', FALSE);
        }
        else{
          drupal_set_message(t('Subscribe email successful.'), 'status', FALSE);
        }
        //~ Send notification to the site admin
        if(variable_get('email_subscribe_send_notification_to_admin', 0) > 0 and $type > 0){
          $admEmail = variable_get('site_mail');
          $params['message'] = t("To email '@email' action was performed '@type'.", array('@email'=>$to, '@type'=>t((string)$arrAdm[$type])));
          $toAdmin = drupal_mail('email_subscribe', 'admin_notice', $admEmail, $language, $params, $from, $send);
          if($toAdmin['result'] == TRUE and $isAdmin){
            drupal_set_message(t('Notification to the site administrator has been sent.'), 'status', FALSE);
          }
          elseif($toAdmin['result'] == FALSE and $isAdmin){
            drupal_set_message(t('Notification to the site administrator has been NOT sent.'), 'warning', FALSE);
          }
        }
      }
      else {
        drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error', FALSE);
        if(empty($type)){
          return false;
        }
      }
      if(!empty($type)){
        drupal_goto();
      }
      return true;
    }
  }
  return false;
}

/**
 * Get/set subscribe/unsubscribe tokens
 * */
function email_subscribe_generate_token($email='', $type=0, $db=TRUE){
  $ip   = explode('.', $_SERVER['REMOTE_ADDR']);
  $suff   = ((int)$ip[0]+(int)end($ip))+(rand(155,775));
  $uuid   = uniqid();
  $token  = md5($suff.$uuid);
  
  if($db){
    try{
      $arrFields = array('subs_token','unsubs_token');
      db_update('email_subscribe_users')
      ->fields(array($arrFields[$type] => $token, 'datechange'=>REQUEST_TIME))
      ->condition('email', check_plain($email))
      ->execute();
    }
    catch(Exception $e){
      watchdog_exception('email-subscribe-error', $e);
      drupal_set_message('Error'); return false;
    }
  }
  return $token;
}

/**
 * Get list of types articles for the email sending
 * */
function _email_subcribe_get_list_node_types(){
  $node_types = variable_get('email_subscribe_allowed_node_types', array('page'));
  return array_filter($node_types);
}

/**
 * Get list of node view types
 * */
function _email_subcribe_get_list_node_view_types(){
  return array(
    1 => 'rss',
    2 => 'teaser',
    3 => 'email_subscribe',
  );
}
